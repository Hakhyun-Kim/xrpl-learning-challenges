{
    "id": "wallet",
    "title": "Challenge 2: Create a TestNet Wallet",
    "description": "Now that we can connect to the TestNet, let's create a new funded wallet. Complete the createTestWallet function to generate a new wallet and fund it using the TestNet faucet.",
    "code": "async function connectToLedger() {\n  const client = new xrpl.Client('wss://s.altnet.rippletest.net:51233');\n  await client.connect();\n  return client;\n}\n\nasync function createTestWallet(client) {\n  try {\n    // CHALLENGE: Use the client to create a funded wallet on the TestNet\n    // HINT: Look up the fundWallet method\n    \n    // Replace this line with your code\n    const fundedWallet = null;\n    \n    console.log(\"Wallet created with address:\", fundedWallet.wallet.address);\n    console.log(\"Wallet has balance:\", await getXRPBalance(client, fundedWallet.wallet.address));\n    \n    return fundedWallet.wallet;\n  } catch (error) {\n    console.error(\"Error creating wallet:\", error);\n    throw error;\n  }\n}\n\nasync function getXRPBalance(client, address) {\n  const response = await client.request({\n    command: \"account_info\",\n    account: address,\n    ledger_index: \"validated\"\n  });\n  \n  return xrpl.dropsToXrp(response.result.account_data.Balance);\n}\n\n// Test the wallet creation\nasync function testWalletCreation() {\n  let client;\n  try {\n    client = await connectToLedger();\n    const wallet = await createTestWallet(client);\n    console.log(\"Test successful! Created wallet with address:\", wallet.address);\n    return true;\n  } catch (error) {\n    console.error(\"Test failed:\", error);\n    return false;\n  } finally {\n    if (client) client.disconnect();\n  }\n}\n\n// Run the test\ntestWalletCreation();",
    "solution": "const fundedWallet = await client.fundWallet();",
    "hint": "Use client.fundWallet() to generate a new wallet and fund it with the TestNet faucet."
  }