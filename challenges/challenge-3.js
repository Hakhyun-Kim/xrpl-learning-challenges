{
    "id": "send-xrp",
    "title": "Challenge 3: Send XRP Payment",
    "description": "Let's create a function to send XRP from one wallet to another. Complete the sendXRP function by filling in the missing transaction details.",
    "code": "async function connectToLedger() {\n  const client = new xrpl.Client('wss://s.altnet.rippletest.net:51233');\n  await client.connect();\n  return client;\n}\n\nasync function sendXRP(client, senderWallet, destinationAddress, amount) {\n  try {\n    // CHALLENGE: Create a Payment transaction to send XRP\n    // Convert the amount to drops (XRP's smallest unit)\n    const drops = xrpl.xrpToDrops(amount);\n    \n    // CHALLENGE: Construct the payment transaction object with:\n    // - TransactionType: 'Payment'\n    // - Account: sender's address\n    // - Destination: recipient's address\n    // - Amount: amount in drops\n    \n    // Replace this with your payment transaction object\n    const payment = {\n      // Fill in the required properties here\n    };\n    \n    // Prepare, sign, and submit the transaction\n    const prepared = await client.autofill(payment);\n    const signed = senderWallet.sign(prepared);\n    const result = await client.submitAndWait(signed.tx_blob);\n    \n    if (result.result.meta.TransactionResult === \"tesSUCCESS\") {\n      console.log(`Payment of ${amount} XRP sent successfully to ${destinationAddress}`);\n      console.log(`Transaction hash: ${result.result.hash}`);\n      return true;\n    } else {\n      console.error(\"Transaction failed:\", result.result.meta.TransactionResult);\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Error sending XRP:\", error);\n    return false;\n  }\n}\n\n// Test sending XRP\nasync function testSendXRP() {\n  let client;\n  try {\n    client = await connectToLedger();\n    \n    // Create two test wallets\n    const wallet1 = (await client.fundWallet()).wallet;\n    const wallet2 = (await client.fundWallet()).wallet;\n    \n    console.log(\"Sender address:\", wallet1.address);\n    console.log(\"Receiver address:\", wallet2.address);\n    \n    // Send 10 XRP from wallet1 to wallet2\n    const success = await sendXRP(client, wallet1, wallet2.address, \"10\");\n    \n    if (success) {\n      console.log(\"Payment test completed successfully!\");\n    } else {\n      console.log(\"Payment test failed.\");\n    }\n    \n    return success;\n  } catch (error) {\n    console.error(\"Test failed:\", error);\n    return false;\n  } finally {\n    if (client) client.disconnect();\n  }\n}\n\n// Run the test\ntestSendXRP();",
    "solution": "const payment = {\n  TransactionType: 'Payment',\n  Account: senderWallet.address,\n  Destination: destinationAddress,\n  Amount: drops\n};",
    "hint": "The payment object should have 4 properties: TransactionType (\"Payment\"), Account (sender's address), Destination (recipient's address), and Amount (the XRP amount in drops)."
  }