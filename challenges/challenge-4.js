{
    "id": "check-transaction",
    "title": "Challenge 4: Verify Transaction Status",
    "description": "Let's create a function to check the status of a transaction. Complete the checkTransaction function to retrieve and verify a transaction by its hash.",
    "code": "async function connectToLedger() {\n  const client = new xrpl.Client('wss://s.altnet.rippletest.net:51233');\n  await client.connect();\n  return client;\n}\n\nasync function checkTransaction(client, transactionHash) {\n  try {\n    // CHALLENGE: Create a request to fetch transaction information\n    // - Use the 'tx' command\n    // - Include the transaction hash\n    \n    // Replace this with your request object\n    const request = {\n      // Fill in the required properties here\n    };\n    \n    const response = await client.request(request);\n    \n    // Process and display transaction information\n    if (response.result.validated) {\n      console.log(\"Transaction found!\");\n      console.log(\"Status:\", response.result.meta.TransactionResult);\n      \n      if (response.result.TransactionType === \"Payment\") {\n        const amount = response.result.Amount;\n        const isXRP = typeof amount === \"string\";\n        \n        if (isXRP) {\n          console.log(\"Payment amount:\", xrpl.dropsToXrp(amount), \"XRP\");\n        } else {\n          console.log(\"Payment is for an issued currency\");\n        }\n        \n        console.log(\"From:\", response.result.Account);\n        console.log(\"To:\", response.result.Destination);\n      }\n      \n      return true;\n    } else {\n      console.log(\"Transaction not yet validated\");\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Error checking transaction:\", error);\n    return false;\n  }\n}\n\n// Test checking a transaction\nasync function testCheckTransaction() {\n  let client;\n  try {\n    client = await connectToLedger();\n    \n    // We'll send a transaction to get a transaction hash to check\n    const wallet1 = (await client.fundWallet()).wallet;\n    const wallet2 = (await client.fundWallet()).wallet;\n    \n    // Send a payment to get a hash\n    const payment = {\n      TransactionType: 'Payment',\n      Account: wallet1.address,\n      Destination: wallet2.address,\n      Amount: xrpl.xrpToDrops(\"5\")\n    };\n    \n    const prepared = await client.autofill(payment);\n    const signed = wallet1.sign(prepared);\n    const result = await client.submitAndWait(signed.tx_blob);\n    \n    const txHash = result.result.hash;\n    console.log(\"Created transaction with hash:\", txHash);\n    \n    // Now check the transaction\n    const success = await checkTransaction(client, txHash);\n    \n    if (success) {\n      console.log(\"Transaction check completed successfully!\");\n    } else {\n      console.log(\"Transaction check failed.\");\n    }\n    \n    return success;\n  } catch (error) {\n    console.error(\"Test failed:\", error);\n    return false;\n  } finally {\n    if (client) client.disconnect();\n  }\n}\n\n// Run the test\ntestCheckTransaction();",
    "solution": "const request = {\n  command: 'tx',\n  transaction: transactionHash\n};",
    "hint": "The request object should have 2 properties: command (set to \"tx\") and transaction (the transaction hash you want to look up)."
  }