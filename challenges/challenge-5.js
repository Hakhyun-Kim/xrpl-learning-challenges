{
    "id": "escrow",
    "title": "Challenge 5: Create an Escrow",
    "description": "Let's create an escrow payment. Escrows are time-locked payments that can be released after a specific time. Complete the createEscrow function to set up a time-based escrow payment.",
    "code": "async function connectToLedger() {\n  const client = new xrpl.Client('wss://s.altnet.rippletest.net:51233');\n  await client.connect();\n  return client;\n}\n\nasync function createEscrow(client, senderWallet, destinationAddress, amount, finishAfter) {\n  try {\n    // Convert the amount to drops\n    const drops = xrpl.xrpToDrops(amount);\n    \n    // Calculate finish time (finishAfter is in seconds from now)\n    const date = new Date();\n    date.setSeconds(date.getSeconds() + finishAfter);\n    \n    // CHALLENGE: Create an EscrowCreate transaction\n    // - TransactionType: 'EscrowCreate'\n    // - Account: sender's address\n    // - Destination: recipient's address\n    // - Amount: amount in drops\n    // - FinishAfter: ripple time when the escrow can be finished (use xrpl.isoTimeToRippleTime())\n    \n    // Replace this with your escrow transaction object\n    const escrowCreate = {\n      // Fill in the required properties here\n    };\n    \n    // Prepare, sign, and submit the transaction\n    const prepared = await client.autofill(escrowCreate);\n    const signed = senderWallet.sign(prepared);\n    const result = await client.submitAndWait(signed.tx_blob);\n    \n    if (result.result.meta.TransactionResult === \"tesSUCCESS\") {\n      console.log(`Escrow created successfully!`);\n      console.log(`Sequence number (needed for finishing): ${prepared.Sequence}`);\n      console.log(`Transaction hash: ${result.result.hash}`);\n      return {\n        success: true,\n        sequence: prepared.Sequence,\n        hash: result.result.hash\n      };\n    } else {\n      console.error(\"Transaction failed:\", result.result.meta.TransactionResult);\n      return { success: false };\n    }\n  } catch (error) {\n    console.error(\"Error creating escrow:\", error);\n    return { success: false };\n  }\n}\n\n// Test creating an escrow\nasync function testCreateEscrow() {\n  let client;\n  try {\n    client = await connectToLedger();\n    \n    // Create two test wallets\n    const wallet1 = (await client.fundWallet()).wallet;\n    const wallet2 = (await client.fundWallet()).wallet;\n    \n    console.log(\"Sender address:\", wallet1.address);\n    console.log(\"Receiver address:\", wallet2.address);\n    \n    // Create an escrow that can be finished after 60 seconds\n    const result = await createEscrow(client, wallet1, wallet2.address, \"20\", 60);\n    \n    if (result.success) {\n      console.log(\"Escrow test completed successfully!\");\n    } else {\n      console.log(\"Escrow test failed.\");\n    }\n    \n    return result.success;\n  } catch (error) {\n    console.error(\"Test failed:\", error);\n    return false;\n  } finally {\n    if (client) client.disconnect();\n  }\n}\n\n// Run the test\ntestCreateEscrow();",
    "solution": "const escrowCreate = {\n  TransactionType: 'EscrowCreate',\n  Account: senderWallet.address,\n  Destination: destinationAddress,\n  Amount: drops,\n  FinishAfter: xrpl.isoTimeToRippleTime(date.toISOString())\n};",
    "hint": "The escrowCreate object needs 5 properties: TransactionType (\"EscrowCreate\"), Account (sender's address), Destination (recipient's address), Amount (drops), and FinishAfter (ripple time calculated with xrpl.isoTimeToRippleTime())."
  }